version: '3.8'

services:
  # Serviço da API Aurora-Platform
  api:
    build:
      context: .
      dockerfile: Dockerfile
    image: aurora-platform:latest
    container_name: aurora-api
    restart: unless-stopped
    env_file:
      - .env
    volumes:
      - ./logs:/app/logs:rw
      - ./certs:/app/certs:ro
    ports:
      - "127.0.0.1:8000:8000"  # Bind apenas ao localhost para segurança
    depends_on:
      - db
      - redis
    networks:
      - aurora-network
    security_opt:
      - no-new-privileges:true  # Impede a escalação de privilégios
    read_only: true  # Sistema de arquivos somente leitura
    tmpfs:
      - /tmp  # Diretório temporário em memória
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Banco de dados PostgreSQL
  db:
    image: postgres:15-alpine
    container_name: aurora-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-aurora}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-changeme}
      POSTGRES_DB: ${DB_NAME:-aurora}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d:ro
    ports:
      - "127.0.0.1:5432:5432"  # Bind apenas ao localhost
    networks:
      - aurora-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-aurora}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # Serviço Redis para cache
  redis:
    image: redis:7-alpine
    container_name: aurora-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-changeme} --appendonly yes
    volumes:
      - redis-data:/data
    ports:
      - "127.0.0.1:6379:6379"  # Bind apenas ao localhost
    networks:
      - aurora-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Proxy reverso Nginx com ModSecurity
  nginx:
    image: owasp/modsecurity-crs:nginx
    container_name: aurora-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./modsecurity.conf:/etc/nginx/modsecurity.d/modsecurity.conf:ro
      - ./certs:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - api
    networks:
      - aurora-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Serviço de monitoramento Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: aurora-prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    ports:
      - "127.0.0.1:9090:9090"  # Bind apenas ao localhost
    networks:
      - aurora-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.external-url=http://localhost:9090'
      - '--web.enable-lifecycle'
    user: "65534:65534"  # nobody:nogroup

  # Serviço de visualização Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: aurora-grafana
    restart: unless-stopped
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    ports:
      - "127.0.0.1:3000:3000"  # Bind apenas ao localhost
    networks:
      - aurora-network
    depends_on:
      - prometheus
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_SERVER_DOMAIN: "localhost"
      GF_SECURITY_ALLOW_EMBEDDING: "false"
      GF_SECURITY_COOKIE_SECURE: "true"
      GF_SECURITY_COOKIE_SAMESITE: "strict"

networks:
  aurora-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16
    driver_opts:
      com.docker.network.bridge.name: aurora-net
      com.docker.network.driver.mtu: 1500

volumes:
  postgres-data:
  redis-data:
  nginx-logs:
  prometheus-data:
  grafana-data:
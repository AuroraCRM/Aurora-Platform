# verify_aurora.py
import sys
import os
from importlib.metadata import version, PackageNotFoundError

# --- Configura√ß√£o ---
LIBRARIES_TO_CHECK = [
    "fastapi",
    "sqlalchemy",
    "pydantic",
    "dynaconf",
    "flake8",
    "bandit",
    "mypy",
]

FILES_TO_VERIFY = {
    "src/aurora/database_config.py": "class Base(DeclarativeBase):",
    "src/integrations/cnpj_adapter.py": "return data if isinstance(data, dict) else {}",
    "src/aurora/core/context_engine.py": "from typing import Dict, Any, Optional",
}

# --- Fun√ß√µes de Verifica√ß√£o ---


def print_header(title):
    print("\n" + "=" * 60)
    print(f"üî¨ {title}")
    print("=" * 60)


def verify_python_version():
    print_header("Verifica√ß√£o da Vers√£o do Python")
    version_info = sys.version_info
    print(
        f"Vers√£o detectada: {version_info.major}.{version_info.minor}.{version_info.micro}"
    )
    if version_info.major < 3 or version_info.minor < 10:
        print(
            "‚ùå ALERTA: Vers√£o do Python √© mais antiga que a 3.10. Recomenda-se Python 3.10+."
        )
    else:
        print("‚úÖ Vers√£o do Python compat√≠vel.")


def verify_library_versions():
    print_header("Verifica√ß√£o das Vers√µes das Bibliotecas")
    for lib in LIBRARIES_TO_CHECK:
        try:
            lib_version = version(lib)
            print(f"- {lib:<15}: {lib_version}", end="")
            if lib == "sqlalchemy" and not lib_version.startswith("2."):
                print("  -> ‚ùå ALERTA CR√çTICO: Vers√£o do SQLAlchemy n√£o √© 2.x!")
            else:
                print("  -> ‚úÖ")
        except PackageNotFoundError:
            print(f"- {lib:<15}: ‚ùå N√ÉO ENCONTRADA!")


def verify_file_contents():
    print_header("Verifica√ß√£o do Conte√∫do dos Arquivos Corrigidos")
    all_files_ok = True
    for file_path, expected_string in FILES_TO_VERIFY.items():
        print(f"- Verificando '{file_path}'...")
        if not os.path.exists(file_path):
            print(f"  ‚ùå ERRO: Arquivo n√£o encontrado.")
            all_files_ok = False
            continue

        try:
            with open(file_path, "r", encoding="utf-8") as f:
                content = f.read()

            if expected_string in content:
                print(f"  ‚úÖ Conte√∫do esperado encontrado.")
            else:
                print(f"  ‚ùå ALERTA: O arquivo n√£o cont√©m a corre√ß√£o esperada.")
                print(f"    (Esperava encontrar: '{expected_string}')")
                all_files_ok = False
        except Exception as e:
            print(f"  ‚ùå ERRO ao ler o arquivo: {e}")
            all_files_ok = False

    if all_files_ok:
        print(
            "\n‚úÖ Todos os arquivos parecem estar com as √∫ltimas corre√ß√µes aplicadas."
        )
    else:
        print(
            "\n‚ùå ALERTA: Um ou mais arquivos n√£o est√£o atualizados. As corre√ß√µes anteriores precisam ser reaplicadas."
        )


# --- Execu√ß√£o Principal ---
if __name__ == "__main__":
    print("Iniciando diagn√≥stico completo do ambiente e c√≥digo do Projeto Aurora...")
    verify_python_version()
    verify_library_versions()
    verify_file_contents()
    print("\n" + "=" * 60)
    print("Diagn√≥stico conclu√≠do.")
    print("=" * 60)

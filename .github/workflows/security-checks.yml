name: Security Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 0 * * 0'  # Executa semanalmente aos domingos

jobs:
  security-checks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install bandit safety pytest-cov
          
      - name: Run Bandit (Static Application Security Testing)
        run: |
          bandit -r src/ -f json -o bandit-results.json
        continue-on-error: true
          
      - name: Check for vulnerabilities in dependencies
        run: |
          safety check -r requirements.txt --json > safety-results.json
        continue-on-error: true
          
      - name: Run tests with coverage
        run: |
          pytest --cov=src tests/ --cov-report=xml
          
      - name: Upload security scan results
        uses: actions/upload-artifact@v3
        with:
          name: security-scan-results
          path: |
            bandit-results.json
            safety-results.json
            coverage.xml
            
      - name: Check for secrets in code
        uses: zricethezav/gitleaks-action@master
        continue-on-error: true
        
      - name: Run OWASP ZAP API Scan
        uses: zaproxy/action-api-scan@v0.4.0
        with:
          target: 'http://localhost:8000/openapi.json'
          docker_name: 'owasp/zap2docker-stable'
          format: 'json'
          cmd_options: '-a'
        continue-on-error: true
        
      - name: Generate security report
        run: |
          echo "# Security Scan Report" > security-report.md
          echo "## Dependency Vulnerabilities" >> security-report.md
          python -c "import json; data = json.load(open('safety-results.json')); print(f'Found {len(data)} vulnerabilities' if isinstance(data, list) else 'No vulnerabilities found')" >> security-report.md
          echo "## Code Security Issues" >> security-report.md
          python -c "import json; data = json.load(open('bandit-results.json')); print(f'Found {len(data.get(\"results\", []))} issues' if isinstance(data, dict) and 'results' in data else 'No issues found')" >> security-report.md
          echo "## Test Coverage" >> security-report.md
          python -c "import xml.etree.ElementTree as ET; root = ET.parse('coverage.xml').getroot(); print(f'Coverage: {root.attrib.get(\"line-rate\", 0) * 100:.2f}%')" >> security-report.md
          
      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-report
          path: security-report.md
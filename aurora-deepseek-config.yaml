# üîí Aurora DeepSeek Configuration - YAML de Tarefas Estrat√©gicas

# (mantido) suas configura√ß√µes j√° existentes...
# ...

deepseek_tasks:
  # ‚ö†Ô∏è Mant√©m todas as suas tarefas anteriores aqui (n√£o sobrescrevo)

  # ‚úÖ Nova tarefa adicionada
  - id: aurora-struct-evolution
    name: "Reestrutura√ß√£o Inteligente da Aurora Platform"
    description: >
      Investiga estrat√©gias avan√ßadas para reestruturar um sistema de CRM aut√¥nomo com IA,
      permitindo que ele evolua por conta pr√≥pria com seguran√ßa, rastreabilidade e estabilidade.

    prompt: |
      Voc√™ √© um especialista em engenharia de software baseada em agentes, com foco em sistemas aut√¥nomos, conversacionais e de aprendizado cont√≠nuo.

      Estou desenvolvendo um CRM inteligente chamado Aurora, com as seguintes caracter√≠sticas:
      - Backend em Python (FastAPI), arquitetura Clean (routers, services, models, repositories)
      - Banco PostgreSQL, mas com estrutura din√¢mica: os usu√°rios podem solicitar novos campos no modelo de cliente via chat, e o sistema os cria automaticamente, sem interven√ß√£o humana
      - IA local com RAG, vetoriza√ß√£o, Langchain, PLN e aprendizado cont√≠nuo
      - Seguran√ßa e infraestrutura com Docker, Redis, Nginx com ModSecurity, Prometheus e Grafana
      - Interface 100% conversacional, orientada por assistente (sem CRUD cl√°ssico)

      Tendo isso em mente, pesquise e recomende:
      1. A melhor forma de modelar dados din√¢micos em bancos relacionais ou h√≠bridos (PostgreSQL, JSONB, ou alternativos como ArangoDB ou RedisJSON)
      2. Estrat√©gias para supervis√£o por agentes ReAct ou AutoGPT-like sobre mudan√ßas de schema
      3. Abordagens modernas de autoindexa√ß√£o sem√¢ntica, organiza√ß√£o de vetores, e representa√ß√£o adaptativa de conhecimento
      4. Arquiteturas para CRMs ou ERPs com crescimento auto-dirigido
      5. Como balancear flexibilidade e seguran√ßa em ambientes onde o usu√°rio manipula a estrutura de dados via IA

      Ferramentas em uso: SQLAlchemy + Pydantic v2, Poetry, Docker, Redis, CNPJ√° API, FastAPI, Langchain, vetorizadores locais, agentes ReAct.

      O objetivo final √© permitir que o sistema aprenda e se adapte sozinho ‚Äî mantendo seguran√ßa, auditabilidade e performance.

    agents_allowed:
      - gem-aurora
      - deepseek-coder
      - deepseek-vision

    mode: research
    priority: high
